
{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "setup VPC, create subnets",

  "Parameters" : {

        "KeyName" : {
        "Description" : "Name of existing key to use for ssh in ec2 instances",
        "Type" : "String",
        "Default" : "demo",
        "AllowedPattern" : "[a-zA-Z]*",
        "ConstraintDescription" : "Must be string of characters only"

        },

        "CIDRVPC" : {
        "Description" : "CIDR Block for VPC",
        "Type" : "String",
        "Default" : "10.0.0.0/16",
        "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription" : "Make sure it is a valid CIDR range"
        },

        "CIDRPublicSubnet" : {
        "Description" : "CIDR Block for Public Subnet",
        "Type" : "String",
        "Default" : "10.0.0.0/24",
        "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription" : "Make sure it is a valid CIDR Range"
        },

        "CIDRPrivateSubnet1" : {
        "Description" : "CIDR Block for Private Subnet 1",
        "Type" : "String",
        "Default" : "10.0.2.0/24",
        "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription" : "Make sure it is a valid CIDR Range"
        },

        "CIDRPrivateSubnet2" : {
        "Description" : "CIDR block for Private Subnet 2",
        "Type" : "String",
        "Default" : "10.0.3.0/24",
        "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription" : "Make Sure its a valid CIDR Range"
        },

        "VPCName" : {
        "Description" : "Name of VPC",
        "Type" : "String",
        "Default" : "WordpressProd",
        "AllowedPattern" : "[a-zA-Z]*",
        "ConstraintDescription" : "Allow only characters"
        },

        "EC2InstanceType" : {
          "Description" : "WebServer EC2 instance type",
          "Type" : "String",
          "Default" : "t2.micro",
          "AllowedValues" : [ "t2.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
          "ConstraintDescription" : "Make sure InstanceType is a valid EC2 instance type."
        },

        "SSHLocation" : {
        "Description" : "IP range from where you can ssh to your ec2 instances",
        "Type" : "String",
        "Default" : "0.0.0.0/0",
        "MinLength" : "9",
        "MaxLength" : "18",
        "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription" : "Make sure its a valid IP range"
        },

        "DBName" : {
          "Description" : "RDS DB Name",
          "Type": "String",
          "Default": "wordpress",
          "MinLength": "6",
          "MaxLength": "25",
          "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
          "ConstraintDescription" : "Make Sure first Letter must be an alphabet"
        },

        "DBUser" : {
          "Description" : "RDS DB Master Username",
          "Type": "String",
          "Default" : "Master",
          "MinLength": "6",
          "MaxLength": "25",
          "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
          "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
        },

        "DBPassword" : {
          "NoEcho": "true",
          "Description" : "RDS DB Master Password ",
          "Type": "String",
          "Default" : "adminadmin",
          "MinLength": "6",
          "MaxLength": "25",
          "AllowedPattern" : "[a-zA-Z0-9]*",
          "ConstraintDescription" : "Make sure only alphanumeric"
        }
      },

  "Resources" : {

          "VPC" : {
                "Type" : "AWS::EC2::VPC",
                "Properties" : {
                "CidrBlock" : "10.0.0.0/16",
                "Tags" : [ {"Key" : "Name", "Value" : { "Ref" : "VPCName"} },
                        {"Key" : "CF-Stack Name", "Value" : {"Ref" : "AWS::StackName"} }
                      ]
                }
        },

        "myInternetGateway" : {
           "Type" : "AWS::EC2::InternetGateway",
           "Properties" : {
              "Tags" : [ {"Key" : "Name", "Value" : "wordpress"}]
           }
        },


           "AttachGateway" : {
              "Type" : "AWS::EC2::VPCGatewayAttachment",
              "Properties" : {
                 "VpcId" : { "Ref" : "VPC" },
                 "InternetGatewayId" : { "Ref" : "myInternetGateway" }
              }
           },


        "SubnetPublic" : {
                "Type" : "AWS::EC2::Subnet",
                "Properties": {
                  "VpcId": {"Ref" : "VPC"},
                  "AvailabilityZone": "us-east-1a",
                  "MapPublicIpOnLaunch" : "true",
                  "CidrBlock": {"Ref" : "CIDRPublicSubnet" },
                  "Tags": [ {"Key" : "Subnet Type", "Value" : "Public" },
                          {"Key" : "CF-Stack Name", "Value" : {"Ref" : "AWS::StackName"} }
                        ]
              }
        },




        "PublicRouteTable" : {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {"Ref" : "VPC"}
            }
        },

        "DefaultRoute": {
          "Type": "AWS::EC2::Route",
          "DependsOn": "myInternetGateway",
          "Properties": {
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {"Ref" : "myInternetGateway"},
            "RouteTableId": { "Ref": "PublicRouteTable" }
          }
        },

        "AssocPublicSubnet": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {"Ref": "SubnetPublic"},
            "RouteTableId": {"Ref": "PublicRouteTable"}
          }
        },

        "SubnetPrivate1" : {
                "Type" : "AWS::EC2::Subnet",
                "Properties": {
                  "AvailabilityZone": "us-east-1a",
                  "CidrBlock": {"Ref" : "CIDRPrivateSubnet1" },
                  "Tags": [ {"Key" : "Subnet Type", "Value" : "Private" },
                          {"Key" : "CF-Stack Name", "Value" : {"Ref" : "AWS::StackName"} }
                        ],
                  "VpcId": {"Ref" : "VPC"}
              }
        },

        "SubnetPrivate2" : {
                "Type" : "AWS::EC2::Subnet",
                "Properties": {
                  "AvailabilityZone": "us-east-1b",
                  "CidrBlock": {"Ref" : "CIDRPrivateSubnet2" },
                  "Tags": [ {"Key" : "Subnet Type", "Value" : "Private" },
                          {"Key" : "CF-Stack Name", "Value" : {"Ref" : "AWS::StackName"} }
                        ],
                  "VpcId": {"Ref" : "VPC"}
              }
        },

        "DBSubnetGrp": {
          "Type": "AWS::RDS::DBSubnetGroup",
          "Properties": {
                "DBSubnetGroupDescription": "RDS instance subnets",
                "SubnetIds": [ {"Ref" : "SubnetPrivate1" }, {"Ref" : "SubnetPrivate2"}],
                "Tags":[ {"Key" : "Name", "Value" : "DB Subnet Group" },
                        {"Key" : "CF-Stack Name", "Value" : {"Ref" : "AWS::StackName"} }
                      ]
              }
        },

        "WebServerSecGrp": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "GroupDescription": "Enable SSH and HTTP access",
            "VpcId": {"Ref" : "VPC"},
            "SecurityGroupIngress": [
              {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
              {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
              ],
              "Tags":[ {"Key" : "Name", "Value" : "WebServer Security Group" },
                      {"Key" : "CF-Stack Name", "Value" : {"Ref" : "AWS::StackName"} }
                  ]
            }
        },

        "DBSecGrp": {
          "Type": "AWS::RDS::DBSecurityGroup",
          "Properties": {
            "GroupDescription": "Only allow access over DB port",
            "EC2VpcId": {"Ref" : "VPC"},
            "DBSecurityGroupIngress": {"EC2SecurityGroupId" : { "Fn::GetAtt" : ["WebServerSecGrp", "GroupId"]}},
            "Tags":[ {"Key" : "Name", "Value" : "RDS DB Security Group" },
                     {"Key" : "CF-Stack Name", "Value" : {"Ref" : "AWS::StackName"}}]
            }
        },

        "WebServer": {
          "Type" : "AWS::EC2::Instance",
          "Metadata" : {
            "AWS::CloudFormation::Init" : {
              "configSets" : {
                "wordpress_install" : ["install_cfn", "install_wordpress", "configure_wordpress" ]
              },
              "install_cfn" : {
                "files": {
                  "/etc/cfn/cfn-hup.conf": {
                    "content": { "Fn::Join": [ "", [
                      "[main]\n",
                      "stack=", { "Ref": "AWS::StackId" }, "\n",
                      "region=", { "Ref": "AWS::Region" }, "\n"
                    ]]},
                    "mode"  : "000400",
                    "owner" : "root",
                    "group" : "root"
                  },
                  "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                    "content": { "Fn::Join": [ "", [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.WebServer.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                              "         --stack ", { "Ref" : "AWS::StackName" },
                              "         --resource WebServer ",
                              "         --configsets wordpress_install ",
                              "         --region ", { "Ref" : "AWS::Region" }, "\n"
                    ]]},
                    "mode"  : "000400",
                    "owner" : "root",
                    "group" : "root"
                  }
                },
                "services" : {
                  "sysvinit" : {
                    "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                                  "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
                  }
                }
              },

              "install_wordpress" : {
                "packages" : {
                  "yum" : {
                    "php"          : [],
                    "php-mysql"    : [],
                    "httpd"        : []
                  }
                },
                "sources" : {
                  "/var/www/html" : "http://wordpress.org/latest.tar.gz"
                },
                "files" : {
                  "/tmp/create-wp-config" : {
                    "content" : { "Fn::Join" : [ "", [
                      "#!/bin/bash -xe\n",
                      "cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php\n",
                      "sed -i \"s/'database_name_here'/'",{ "Ref" : "DBName" }, "'/g\" wp-config.php\n",
                      "sed -i \"s/'username_here'/'",{ "Ref" : "DBUser" }, "'/g\" wp-config.php\n",
                      "sed -i \"s/'password_here'/'",{ "Ref" : "DBPassword" }, "'/g\" wp-config.php\n",
                      "sed -i \"s/'localhost'/'",{"Fn::GetAtt" : ["DBServer", "Endpoint.Address"]}, "'/g\" wp-config.php\n"
                    ]]},
                    "mode" : "000500",
                    "owner" : "root",
                    "group" : "root"
                  }
                },
                "services" : {
                  "sysvinit" : {
                    "httpd"  : { "enabled" : "true", "ensureRunning" : "true" }
                  }
                }
              },

              "configure_wordpress" : {
                "commands" : {
                  "configure_wordpress" : {
                    "command" : "/tmp/create-wp-config",
                    "cwd" : "/var/www/html/wordpress"
                  }
                }
              }
            }
          },
          "Properties": {
            "ImageId" : "ami-c58c1dd3",
            "InstanceType"   : { "Ref" : "EC2InstanceType" },
            "AvailabilityZone": "us-east-1a",
            "SecurityGroupIds": [{"Ref" : "WebServerSecGrp"}],
            "SubnetId": {"Ref" : "SubnetPublic"},
            "KeyName"        : { "Ref" : "KeyName" },
            "UserData"         : { "Fn::Base64" : { "Fn::Join" : ["", [
              "#!/bin/bash\n",
              "yum update -y aws-cfn-bootstrap\n",

              "/opt/aws/bin/cfn-init -v ",
              "         --stack ", { "Ref" : "AWS::StackName" },
              "         --resource WebServer ",
              "         --configsets wordpress_install ",
              "         --region ", { "Ref" : "AWS::Region" }, "\n",

              "/opt/aws/bin/cfn-signal -e $? '", { "Ref" : "WaitHandle" }, "'\n",

              "# Setup correct file ownership\n",
              "chown -R apache:apache /var/www/html/wordpress\n"

            ]]}}
          }
        },
            "WaitHandle" : {
              "Type" : "AWS::CloudFormation::WaitConditionHandle"
            },
            "WaitCondition" : {
              "Type" : "AWS::CloudFormation::WaitCondition",
              "DependsOn" : "WebServer",
              "Properties" : {
                "Handle" : {"Ref" : "WaitHandle"},
                "Timeout" : "600"
              }
            },
        "DBServer": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
              "AllocatedStorage": "5",
              "AvailabilityZone": "us-east-1b",
              "BackupRetentionPeriod": "0",
              "DBInstanceClass": "db.t2.micro",
              "DBName": {"Ref" : "DBName"},
              "Engine": "MySQL",
              "MasterUsername": {"Ref" : "DBUser"},
              "MasterUserPassword": {"Ref" : "DBPassword"},
              "DBSecurityGroups"  : [{ "Ref" : "DBSecGrp" }],
              "DBSubnetGroupName": {"Ref" : "DBSubnetGrp"},
              "MultiAZ": "false",
              "StorageType": "gp2",
              "Tags": [ {"Key" : "Name", "Value" : "RDS DB" },
                      {"Key" : "CF-Stack Name", "Value" : {"Ref" : "AWS::StackName"} }
                    ]
              }
        }
  },

  "Outputs" : {
    "WebsiteURL" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "WebServer", "PublicIp"] }, "/wordpress"]] },
      "Description" : "WordPress Website"
    },
    "WebServerIp": {
      "Value" : {"Fn::GetAtt" : [ "WebServer", "PublicIp"]},
      "Description" : "WebServer Public IP"
    }
  }
}
